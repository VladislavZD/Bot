from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import asyncio
import uuid

TOKEN = "–∞–π–¥–∏"
MAX_PARTICIPANTS = 20
YOOKASSA_SHOP_ID = "–í–ê–®_SHOP_ID"
YOOKASSA_SECRET_KEY = "–í–ê–®_SECRET_KEY"

bot = Bot(token=TOKEN)
dp = Dispatcher()

paid_participants = set()
pending_payments = {}  # {user_id: payment_id}

class PaymentStates(StatesGroup):
    WAITING_PAYMENT = State()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
main_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–û–ø–ª–∞—Ç–∏—Ç—å‚úÖ")],
        [KeyboardButton(text="–°–≤—è–∑–∞—Ç—å—Å—è —Å –ò–Ω–Ω–æ–π‚úçüèª")]
    ],
    resize_keyboard=True
)

@dp.message(Command("start"))
async def start(message: types.Message):
    welcome_text = (
        "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –ò–Ω–Ω–∞ –∏ —Ç—ã –≤ —à–∞–≥–µ –æ—Ç –Ω–∞—à–µ–π –≤—Å—Ç—Ä–µ—á–∏ –Ω–∞ –ø–∞—Ä—Ñ—é–º–µ—Ä–Ω–æ–º –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–µ –æ—Ç –º–µ–Ω—è:)\n\n"
        f"–°–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç –æ—Å—Ç–∞–ª–æ—Å—å: {MAX_PARTICIPANTS - len(paid_participants)} –∏–∑ {MAX_PARTICIPANTS}\n\n"
        "ü§ç –û–±—É—á–µ–Ω–∏–µ –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö\nü§ç –û—Å–Ω–æ–≤—ã –ø–∞—Ä—Ñ—é–º–µ—Ä–∏–∏\nü§ç 2,5-3 —á–∞—Å–∞ —Å —Ñ—É—Ä—à–µ—Ç–æ–º\n\n"
        "–°—Ç–æ–∏–º–æ—Å—Ç—å: 2599‚ÇΩ. –ú–µ—Å—Ç–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω—ã!"
    )
    await message.answer(welcome_text, reply_markup=main_keyboard)

@dp.message(lambda message: message.text == "–û–ø–ª–∞—Ç–∏—Ç—å‚úÖ")
async def process_payment(message: types.Message, state: FSMContext):
    if len(paid_participants) >= MAX_PARTICIPANTS:
        await message.answer("‚ùå –í—Å–µ –º–µ—Å—Ç–∞ –∑–∞–Ω—è—Ç—ã! –°–≤—è–∂–∏—Ç–µ—Å—å —Å –ò–Ω–Ω–æ–π –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è.")
        return
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –ø–ª–∞—Ç–µ–∂–∞
    payment_id = str(uuid.uuid4())
    pending_payments[message.from_user.id] = payment_id
    
    # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–µ–∞–ª—å–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ÆKassa
    payment_url = f"https://yoomoney.ru/checkout/payments/v2/contract?orderId={payment_id}&amount=2599"
    
    await message.answer(
        "–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã:\n"
        f"{payment_url}\n\n"
        "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–Ø –æ–ø–ª–∞—Ç–∏–ª(–∞)", callback_data="check_payment")]
        ])
    )
    await state.set_state(PaymentStates.WAITING_PAYMENT)

async def check_payment_status(payment_id: str) -> bool:
    """–§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ API –ÆKassa"""
    # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–ø—Ä–æ—Å –∫ API –ÆKassa
    # –≠—Ç–æ –∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞ - –≤ 80% —Å–ª—É—á–∞–µ–≤ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç True
    return True  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É

@dp.callback_query(PaymentStates.WAITING_PAYMENT, lambda c: c.data == "check_payment")
async def verify_payment(callback_query: types.CallbackQuery, state: FSMContext):
    user_id = callback_query.from_user.id
    payment_id = pending_payments.get(user_id)
    
    if not payment_id:
        await callback_query.message.answer("–ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")
        await state.clear()
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø–ª–∞—Ç—É
    is_paid = await check_payment_status(payment_id)
    
    if is_paid:
        paid_participants.add(user_id)
        confirmation = (
            "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –ò–Ω–Ω–∞:)\n\n"
            "–í—Å–µ –≥–æ—Ç–æ–≤–æ, –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å –æ–ø–ª–∞—á–µ–Ω!‚ù§Ô∏è\n"
            "–£–≤–∏–¥–∏–º—Å—è –Ω–∞ –Ω–∞—à–µ–π –≤—Å—Ç—Ä–µ—á–µ:)\n\n"
            "üìç –ú–µ—Å—Ç–æ:\n"
            "‚ìÇÔ∏è –ö—É—Ä—Å–∫–∞—è, –ù–∞—Å—Ç–∞–≤–Ω–∏—á–µ—Å–∫–∏–π –ø–µ—Ä., –¥. 17, —Å—Ç—Ä.1, WorkShopLoft 9\n\n"
            "‚è∞ –í—Ä–µ–º—è —Å–±–æ—Ä–∞ –≥–æ—Å—Ç–µ–π ‚Äì 12:00, –Ω–∞—á–∞–ª–æ: 13:00\n\n"
            f"–í–∞—à –Ω–æ–º–µ—Ä: {len(paid_participants)}/{MAX_PARTICIPANTS}"
        )
        await callback_query.message.answer(confirmation)
    else:
        await callback_query.message.answer("‚ùå –û–ø–ª–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.")
    
    await state.clear()
    await bot.answer_callback_query(callback_query.id)

@dp.message(lambda message: message.text == "–°–≤—è–∑–∞—Ç—å—Å—è —Å –ò–Ω–Ω–æ–π‚úçüèª")
async def contact_me(message: types.Message):
    await message.answer(
        "–ü–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –≤ —á–∞—Ç —Å –ò–Ω–Ω–æ–π üëá",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ù–∞–ø–∏—Å–∞—Ç—å –ò–Ω–Ω–µ", url="https://t.me/innaboutbeautypr")]
        ])
    )

async def main():
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())